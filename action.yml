name: 'Universal AI Merge Issue Analyzer'
description: 'Uses a specified generative AI model (e.g., Gemini, OpenAI) to analyze Git diffs for potential merge conflicts, breaking changes, and logical issues.'
author: 'shekhar199511'

inputs:
  ai_provider:
    description: 'The AI service provider (e.g., "gemini", "openai").'
    required: true
    default: 'gemini'
  ai_api_key:
    description: 'Your AI service API Key. Store as a GitHub Secret for security.'
    required: true
  api_base_url:
    description: 'The base URL for the AI API endpoint. Leave empty for provider defaults.'
    required: false
    default: ''
  model_name:
    description: 'The specific AI model to use (e.g., "gemini-2.0-flash", "gpt-4o").'
    required: true
    default: 'gemini-2.0-flash'

outputs:
  analysis_report:
    description: 'The full text report from the AI analysis.'
    value: ${{ steps.analyze.outputs.report }}
  analysis_status:
    description: 'Overall status of the analysis: "PASS" if no issues, "FAIL" otherwise.'
    value: ${{ steps.analyze.outputs.status }}

runs:
  using: 'composite'
  steps:
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Install dependencies
      shell: bash
      run: |
        pip install requests unidiff

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Generate Git Diff
      shell: bash
      run: |
        git fetch origin ${{ github.base_ref }}
        git diff origin/${{ github.base_ref }} HEAD > diff.txt
        DIFF_CONTENT=$(cat diff.txt)
        echo "DIFF_CONTENT<<EOF" >> $GITHUB_ENV
        echo "$DIFF_CONTENT" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    - name: Run AI analysis script
      id: analyze
      shell: bash
      env:
        AI_PROVIDER: ${{ inputs.ai_provider }}
        AI_API_KEY: ${{ inputs.ai_api_key }}
        API_BASE_URL: ${{ inputs.api_base_url }}
        MODEL_NAME: ${{ inputs.model_name }}
        DIFF_DATA: ${{ env.DIFF_CONTENT }}
      run: |
        python ${{ github.action_path }}/analyze_diff.py
        ANALYSIS_REPORT=$(cat ai_analysis_report.txt)
        ANALYSIS_STATUS=$(cat ai_analysis_status.txt)
        echo "report<<EOF" >> $GITHUB_OUTPUT
        echo "$ANALYSIS_REPORT" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        echo "status=$ANALYSIS_STATUS" >> $GITHUB_OUTPUT

    - name: Comment on Pull Request (Summary Table Only)
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const report = process.env.AI_REPORT_OUTPUT;
          const status = process.env.AI_STATUS_OUTPUT;
          const provider = process.env.AI_PROVIDER_USED;
          const model = process.env.MODEL_USED;

          // Extract summary table (assumes it's at the top, after "Summary Table:")
          let summaryTable = '';
          const summaryMatch = report.match(/Summary Table:\s*\n([\s\S]*?)(?:\n\n|$)/);
          if (summaryMatch) {
            summaryTable = summaryMatch[1].trim();
          } else {
            summaryTable = "No summary table found.";
          }

          let commentBody = `### AI Merge Analysis Summary Table (${provider} - ${model})\n\n`;
          commentBody += summaryTable + "\n\n";

          if (status === 'FAIL') {
            commentBody += `**Overall Status: ðŸ”´ FAILED (Potential issues detected)**`;
          } else if (status === 'PASS') {
            commentBody += `**Overall Status: ðŸŸ¢ PASSED (No major issues detected)**`;
          }

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: commentBody
          });
      env:
        AI_REPORT_OUTPUT: ${{ steps.analyze.outputs.report }}
        AI_STATUS_OUTPUT: ${{ steps.analyze.outputs.status }}
        AI_PROVIDER_USED: ${{ inputs.ai_provider }}
        MODEL_USED: ${{ inputs.model_name }}

    - name: Post Inline Comments
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITHUB_REPOSITORY: ${{ github.repository }}
        PR_NUMBER: ${{ github.event.pull_request.number }}
      run: python ${{ github.action_path }}/post_inline_comments.py

    - name: Set job status based on AI analysis
      if: steps.analyze.outputs.status == 'FAIL'
      shell: bash
      run: exit