# .github/action.yml - This file defines the GitHub Action's metadata and execution flow.
# When someone uses this action, GitHub reads this file to understand how to run it.

name: 'Universal AI Merge Issue Analyzer'
description: 'Uses a specified generative AI model (e.g., Gemini, OpenAI) to analyze Git diffs for potential merge conflicts, breaking changes, and logical issues.'
author: 'shekhar199511'

inputs:
  # ai_provider: Specifies which AI service to use (e.g., "gemini", "openai").
  # This allows the action to be flexible and not locked into a single AI vendor.
  ai_provider:
    description: 'The AI service provider (e.g., "gemini", "openai").'
    required: true
    default: 'gemini' # Default to Gemini for convenience if not specified

  # ai_api_key: The API key for the chosen AI service.
  # This MUST be stored as a GitHub Secret in the user's repository for security.
  ai_api_key:
    description: 'Your AI service API Key. Store as a GitHub Secret for security.'
    required: true

  # api_base_url: The base URL for the AI API endpoint.
  # This is optional and allows users to specify custom endpoints (e.g., for self-hosted models or proxies).
  api_base_url:
    description: 'The base URL for the AI API endpoint. Leave empty for provider defaults.'
    required: false
    default: '' # Default to empty string, Python script will handle provider-specific defaults

  # model_name: The specific AI model to use from the chosen provider.
  # Examples: "gemini-2.0-flash" for Gemini, "gpt-4o" for OpenAI.
  model_name:
    description: 'The specific AI model to use (e.g., "gemini-2.0-flash", "gpt-4o").'
    required: true
    default: 'gemini-2.0-flash' # Default to a common Gemini model

  github_token:
    description: 'GitHub token for posting comments'
    required: true

outputs:
  # analysis_report: The full text report generated by the AI.
  # This can be used by other steps in the workflow or just for logging.
  analysis_report:
    description: 'The full text report from the AI analysis.'
    value: ${{ steps.analyze.outputs.report }}

  # analysis_status: A simple PASS/FAIL status from the AI analysis.
  # Useful for setting Quality Gates in a PR.
  analysis_status:
    description: 'Overall status of the analysis: "PASS" if no issues, "FAIL" otherwise.'
    value: ${{ steps.analyze.outputs.status }}

runs:
  # 'composite' is used when your action runs multiple steps/scripts within itself.
  # This is ideal for encapsulating the Python script execution and other actions.
  using: 'composite'
  steps:
    # Step 1: Set up Python environment on the GitHub Actions runner.
    # This ensures Python and pip are available for subsequent steps.
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x' # Use the latest Python 3.x

    # Step 2: Install required Python dependencies for our script.
    # The 'requests' library is needed for making HTTP calls to the AI API.
    - name: Install dependencies
      shell: bash # Specifies the shell to use for this step
      run: |
        pip install requests

    # Step 3: Generate the Git diff content.
    # This crucial step fetches the base branch and then calculates the diff
    # between the base branch (e.g., 'main') and the head of the Pull Request.
    - name: Generate diff content
      shell: bash
      id: generate_diff # Assign an ID to this step to reference its outputs later
      run: |
        # Fetch the base branch to ensure an accurate diff.
        # github.base_ref is the target branch of the PR (e.g., 'main').
        git fetch origin ${{ github.base_ref }}
        
        # Calculate the diff between the base branch and the current PR head.
        # HEAD refers to the commit of the source branch in the PR.
        DIFF_CONTENT=$(git diff "origin/${{ github.base_ref }}" HEAD)
        
        # Store the multiline diff content in an environment variable.
        # This uses a special syntax for multiline strings in GitHub Actions.
        echo "DIFF_CONTENT<<EOF" >> $GITHUB_ENV
        echo "$DIFF_CONTENT" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    - name: Generate Git Diff
      run: git diff origin/${{ github.event.pull_request.base.ref }}...${{ github.event.pull_request.head.ref }} > diff.txt

    # Step 4: Run the core AI analysis Python script.
    # This step executes our Python script, passing inputs as environment variables.
    - name: Run AI analysis script
      id: analyze # Assign an ID to this step to capture its outputs
      shell: bash
      env:
        # Pass all action inputs and the generated diff as environment variables
        # to the Python script.
        AI_PROVIDER: ${{ inputs.ai_provider }}
        AI_API_KEY: ${{ inputs.ai_api_key }}
        API_BASE_URL: ${{ inputs.api_base_url }}
        MODEL_NAME: ${{ inputs.model_name }}
        DIFF_DATA: ${{ env.DIFF_CONTENT }} # The diff content from the previous step
      run: |
        # Execute the Python script located in the action's path.
        # The script will write its report and status to files.
        python ${{ github.action_path }}/analyze_diff.py
        
        # Read the analysis report from the file written by the Python script.
        ANALYSIS_REPORT=$(cat ai_analysis_report.txt)
        # Read the analysis status from the file.
        ANALYSIS_STATUS=$(cat ai_analysis_status.txt) 

        # Set the outputs of this action, which can be consumed by other steps
        # in the user's workflow or simply used for the PR comment.
        echo "report<<EOF" >> $GITHUB_OUTPUT
        echo "$ANALYSIS_REPORT" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        echo "status=$ANALYSIS_STATUS" >> $GITHUB_OUTPUT

    # Step 5: Comment on the Pull Request with the AI's analysis.
    # This makes the AI's findings visible directly in the GitHub UI.
    - name: Comment on Pull Request
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const report = process.env.AI_REPORT_OUTPUT;
          const status = process.env.AI_STATUS_OUTPUT;
          const provider = process.env.AI_PROVIDER_USED;
          const model = process.env.MODEL_USED;

          let commentBody = `### AI Merge Analysis Report (${provider} - ${model})\n\n`;

          // Collapsible details for full report
          commentBody += `<details>\n<summary>Full AI Analysis Report</summary>\n\n`;
          commentBody += "```\n" + report.trim() + "\n```\n";
          commentBody += `</details>\n`;

          if (status === 'FAIL') {
            commentBody += `\n**Overall Status: ðŸ”´ FAILED (Potential issues detected)**`;
          } else if (status === 'PASS') {
            commentBody += `\n**Overall Status: ðŸŸ¢ PASSED (No major issues detected)**`;
          }

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: commentBody
          });
      env:
        AI_REPORT_OUTPUT: ${{ steps.analyze.outputs.report }}
        AI_STATUS_OUTPUT: ${{ steps.analyze.outputs.status }}
        AI_PROVIDER_USED: ${{ inputs.ai_provider }}
        MODEL_USED: ${{ inputs.model_name }}

    - name: Post Inline Comments
      shell: bash
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITHUB_REPOSITORY: ${{ github.repository }}
        PR_NUMBER: ${{ github.event.pull_request.number }}
      run: python ${{ github.action_path }}/post_inline_comments.py

    # Step 6: Set the job status.
    # This step will make the GitHub Actions job fail (red X) if the AI analysis
    # results in a "FAIL" status, which can then block PR merges if configured.
    - name: Set job status based on AI analysis
      if: steps.analyze.outputs.status == 'FAIL' # Only run if AI status is FAIL
      shell: bash
      run: exit 1 # Exit with non-zero code to indicate failure to GitHub Actions